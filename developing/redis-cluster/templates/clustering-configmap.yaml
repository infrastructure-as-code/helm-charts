---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis-cluster.fullname" . }}-clustering
data:
  {{- $global := . }}
  {{- $replicas := .Values.replicaCount | int }}
  {{- $domain := .Values.cluster.domain }}
  {{- $port := .Values.service.port }}
  common.sh: |
    #!/bin/sh

    function install_prereqs()
    {
      apk update
      apk add bind-tools
    }

    # credit: https://www.linuxjournal.com/content/validating-ip-address-bash-script
    function valid_ip()
    {
      local ip=$1
      local stat=1
      if echo $ip | egrep -q ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$; then
        stat=$?
      fi
      return ${stat}
    }

    function lookup_ip()
    {
      local host=$1
      local ip=$(host ${host} | head -n1 | awk '{ print $NF }')
      echo "${ip}"
    }

    function hosts_to_ips()
    {
      local hosts=$@
      local ips=
      for host in ${hosts}; do
        local ip=$(lookup_ip "${host}")
        until valid_ip "${ip}"; do
          ip=$(lookup_ip "${host}")
        done
        ips="${ips} ${ip}"
      done
      echo ${ips}
    }

    function wait_until_all_live()
    {
      local hosts=$@
      set +e
      for host in ${hosts}; do
        until $(/health/ping_liveness.sh 1 "${host}"); do
          sleep 1
        done
      done
      set -e
    }

  create-cluster.sh: |
    #!/bin/sh
    DIRNAME=$(dirname $0)
    . ${DIRNAME}/common.sh
    set -euxo pipefail
    port={{- $port }}
    hosts="{{- range $i, $e := until $replicas }}{{ include "redis-cluster.fullname" $global }}-{{ $i }}.{{ include "redis-cluster.fullname" $global }}.{{ $global.Release.Namespace }}.svc.{{ $domain }}{{- if (lt ( add1 $i ) $replicas ) }} {{ end }}{{- end }}"

    function form_redis_cluster()
    {
      local replicas=0
      local hosts=$@
      local first_host=$1
      local port={{- $port }}
      local host_ports=
      for host in ${hosts}; do
        host_ports="${host_ports} ${host}:${port}"
      done
      echo yes | redis-cli \
        -h ${first_host} \
        -p ${port} \
        --cluster create \
        --cluster-replicas ${replicas} \
        ${host_ports}
    }

    function cluster_nodes()
    {
      local first_host=$1
      local port={{- $port }}
      redis-cli \
        -h ${first_host} \
        -p ${port} \
        cluster nodes
    }

    install_prereqs
    wait_until_all_live ${hosts}
    ips=$(hosts_to_ips ${hosts})
    #sleep 5 # give it time to settle.
    form_redis_cluster ${ips}
    cluster_nodes ${ips}
    exit 0
